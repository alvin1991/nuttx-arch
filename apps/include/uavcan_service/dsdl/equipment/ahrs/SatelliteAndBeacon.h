/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 */

#ifndef __DSDL_UAVCAN_EQUIPMENT_AHRS_SATELLITEANDBEACON
#define __DSDL_UAVCAN_EQUIPMENT_AHRS_SATELLITEANDBEACON

#include <uavcan_service/libcanard/canard.h>

#ifdef __cplusplus
extern "C"
{
#endif

/******************************* Source text **********************************
#
# Satellite and beacon infos.
#
# THIS DEFINITION MAY BE CHANGED IN A NON-BACKWARD-COMPATIBLE WAY IN THE FUTURE.
#

#
# State of Satellite informations.
# The state of fusion in the body frame, the status are ordered as follows:
#   0x00,OK
#   0x01,ERROR
#
int8 state							# Satellite informations

#
# beacon power value.
# the power are ordered as follows:
#
int8 power							# Normalized signal power.[0,100]

#
# Angle difference between beam and body frame.
# the range are ordered as follows:
#
int16 delta_yaw						# Degree x10.[-1800,1800]

#
# Satellite longitude.
# the longitude has been multiply 10:
#
int16 s_lon							# Satellite longitude.[-1800,1800]
******************************************************************************/

/********************* DSDL signature source definition ***********************
dsdl.uavcan.equipment.ahrs.SatelliteAndBeacon
saturated int8 state
saturated int8 power
saturated int16 delta_yaw
saturated int16 s_lon
******************************************************************************/

#define DSDL_UAVCAN_EQUIPMENT_AHRS_SATELLITEANDBEACON_ID   1005
#define DSDL_UAVCAN_EQUIPMENT_AHRS_SATELLITEANDBEACON_NAME "dsdl.uavcan.equipment.ahrs.SatelliteAndBeacon"
#define DSDL_UAVCAN_EQUIPMENT_AHRS_SATELLITEANDBEACON_SIGNATURE (0xD4C674976E3B485AULL)

#define DSDL_UAVCAN_EQUIPMENT_AHRS_SATELLITEANDBEACON_MAX_SIZE ((48 + 7)/8)

// Constants

typedef struct
{
    // FieldTypes
    int8_t     state;                         // bit len 8
    int8_t     power;                         // bit len 8
    int16_t    delta_yaw;                     // bit len 16
    int16_t    s_lon;                         // bit len 16

} dsdl_uavcan_equipment_ahrs_SatelliteAndBeacon;

static inline
uint32_t dsdl_uavcan_equipment_ahrs_SatelliteAndBeacon_encode(dsdl_uavcan_equipment_ahrs_SatelliteAndBeacon* source, void* msg_buf);

static inline
int32_t dsdl_uavcan_equipment_ahrs_SatelliteAndBeacon_decode(const CanardRxTransfer* transfer, uint16_t payload_len, dsdl_uavcan_equipment_ahrs_SatelliteAndBeacon* dest, uint8_t** dyn_arr_buf);

static inline
uint32_t dsdl_uavcan_equipment_ahrs_SatelliteAndBeacon_encode_internal(dsdl_uavcan_equipment_ahrs_SatelliteAndBeacon* source, void* msg_buf, uint32_t offset, uint8_t root_item);

static inline
int32_t dsdl_uavcan_equipment_ahrs_SatelliteAndBeacon_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, dsdl_uavcan_equipment_ahrs_SatelliteAndBeacon* dest, uint8_t** dyn_arr_buf, int32_t offset, uint8_t tao);

/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 */

#ifndef CANARD_INTERNAL_SATURATE
#define CANARD_INTERNAL_SATURATE(x, max) ( ((x) > max) ? max : ( (-(x) > max) ? (-max) : (x) ) );
#endif

#ifndef CANARD_INTERNAL_SATURATE_UNSIGNED
#define CANARD_INTERNAL_SATURATE_UNSIGNED(x, max) ( ((x) > max) ? max : (x) );
#endif

#define CANARD_INTERNAL_ENABLE_TAO  ((uint8_t) 1)
#define CANARD_INTERNAL_DISABLE_TAO ((uint8_t) 0)

#if defined(__GNUC__)
# define CANARD_MAYBE_UNUSED(x) x __attribute__((unused))
#else
# define CANARD_MAYBE_UNUSED(x) x
#endif

/**
  * @brief dsdl_uavcan_equipment_ahrs_SatelliteAndBeacon_encode_internal
  * @param source : pointer to source data struct
  * @param msg_buf: pointer to msg storage
  * @param offset: bit offset to msg storage
  * @param root_item: for detecting if TAO should be used
  * @retval returns offset
  */
uint32_t dsdl_uavcan_equipment_ahrs_SatelliteAndBeacon_encode_internal(dsdl_uavcan_equipment_ahrs_SatelliteAndBeacon* source,
  void* msg_buf,
  uint32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(root_item))
{
    canardEncodeScalar(msg_buf, offset, 8, (void*)&source->state); // 127
    offset += 8;

    canardEncodeScalar(msg_buf, offset, 8, (void*)&source->power); // 127
    offset += 8;

    canardEncodeScalar(msg_buf, offset, 16, (void*)&source->delta_yaw); // 32767
    offset += 16;

    canardEncodeScalar(msg_buf, offset, 16, (void*)&source->s_lon); // 32767
    offset += 16;

    return offset;
}

/**
  * @brief dsdl_uavcan_equipment_ahrs_SatelliteAndBeacon_encode
  * @param source : Pointer to source data struct
  * @param msg_buf: Pointer to msg storage
  * @retval returns message length as bytes
  */
uint32_t dsdl_uavcan_equipment_ahrs_SatelliteAndBeacon_encode(dsdl_uavcan_equipment_ahrs_SatelliteAndBeacon* source, void* msg_buf)
{
    uint32_t offset = 0;

    offset = dsdl_uavcan_equipment_ahrs_SatelliteAndBeacon_encode_internal(source, msg_buf, offset, 1);

    return (offset + 7 ) / 8;
}

/**
  * @brief dsdl_uavcan_equipment_ahrs_SatelliteAndBeacon_decode_internal
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     dsdl_uavcan_equipment_ahrs_SatelliteAndBeacon dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @param offset: Call with 0, bit offset to msg storage
  * @param tao: is tail array optimization used
  * @retval offset or ERROR value if < 0
  */
int32_t dsdl_uavcan_equipment_ahrs_SatelliteAndBeacon_decode_internal(
  const CanardRxTransfer* transfer,
  uint16_t CANARD_MAYBE_UNUSED(payload_len),
  dsdl_uavcan_equipment_ahrs_SatelliteAndBeacon* dest,
  uint8_t** CANARD_MAYBE_UNUSED(dyn_arr_buf),
  int32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(tao))
{
    int32_t ret = 0;

    ret = canardDecodeScalar(transfer, offset, 8, true, (void*)&dest->state);
    if (ret != 8)
    {
        goto dsdl_uavcan_equipment_ahrs_SatelliteAndBeacon_error_exit;
    }
    offset += 8;

    ret = canardDecodeScalar(transfer, offset, 8, true, (void*)&dest->power);
    if (ret != 8)
    {
        goto dsdl_uavcan_equipment_ahrs_SatelliteAndBeacon_error_exit;
    }
    offset += 8;

    ret = canardDecodeScalar(transfer, offset, 16, true, (void*)&dest->delta_yaw);
    if (ret != 16)
    {
        goto dsdl_uavcan_equipment_ahrs_SatelliteAndBeacon_error_exit;
    }
    offset += 16;

    ret = canardDecodeScalar(transfer, offset, 16, true, (void*)&dest->s_lon);
    if (ret != 16)
    {
        goto dsdl_uavcan_equipment_ahrs_SatelliteAndBeacon_error_exit;
    }
    offset += 16;
    return offset;

dsdl_uavcan_equipment_ahrs_SatelliteAndBeacon_error_exit:
    if (ret < 0)
    {
        return ret;
    }
    else
    {
        return -CANARD_ERROR_INTERNAL;
    }
}

/**
  * @brief dsdl_uavcan_equipment_ahrs_SatelliteAndBeacon_decode
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     dsdl_uavcan_equipment_ahrs_SatelliteAndBeacon dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @retval offset or ERROR value if < 0
  */
int32_t dsdl_uavcan_equipment_ahrs_SatelliteAndBeacon_decode(const CanardRxTransfer* transfer,
  uint16_t payload_len,
  dsdl_uavcan_equipment_ahrs_SatelliteAndBeacon* dest,
  uint8_t** dyn_arr_buf)
{
    const int32_t offset = 0;
    int32_t ret = 0;

    /* Backward compatibility support for removing TAO
     *  - first try to decode with TAO DISABLED
     *  - if it fails fall back to TAO ENABLED
     */
    uint8_t tao = CANARD_INTERNAL_DISABLE_TAO;

    while (1)
    {
        // Clear the destination struct
        for (uint32_t c = 0; c < sizeof(dsdl_uavcan_equipment_ahrs_SatelliteAndBeacon); c++)
        {
            ((uint8_t*)dest)[c] = 0x00;
        }

        ret = dsdl_uavcan_equipment_ahrs_SatelliteAndBeacon_decode_internal(transfer, payload_len, dest, dyn_arr_buf, offset, tao);

        if (ret >= 0)
        {
            break;
        }

        if (tao == CANARD_INTERNAL_ENABLE_TAO)
        {
            break;
        }
        tao = CANARD_INTERNAL_ENABLE_TAO;
    }

    return ret;
}

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __DSDL_UAVCAN_EQUIPMENT_AHRS_SATELLITEANDBEACON
