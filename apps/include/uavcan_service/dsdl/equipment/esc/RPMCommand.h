/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 */

#ifndef __DSDL_UAVCAN_EQUIPMENT_ESC_RPMCOMMAND
#define __DSDL_UAVCAN_EQUIPMENT_ESC_RPMCOMMAND

#include <uavcan_service/libcanard/canard.h>

#ifdef __cplusplus
extern "C"
{
#endif

/******************************* Source text **********************************
#
# Simple RPM setpoint.
# The ESC should automatically clamp the setpoint according to the minimum and maximum supported RPM;
# for example, given a ESC that operates in the range 100 to 10000 RPM, a setpoint of 1 RPM will be clamped to 100 RPM.
# Negative values indicate reverse rotation.
#

int18[<=20] rpm
******************************************************************************/

/********************* DSDL signature source definition ***********************
dsdl.uavcan.equipment.esc.RPMCommand
saturated int18[<=20] rpm
******************************************************************************/

#define DSDL_UAVCAN_EQUIPMENT_ESC_RPMCOMMAND_ID            1031
#define DSDL_UAVCAN_EQUIPMENT_ESC_RPMCOMMAND_NAME          "dsdl.uavcan.equipment.esc.RPMCommand"
#define DSDL_UAVCAN_EQUIPMENT_ESC_RPMCOMMAND_SIGNATURE     (0xCF05EC0DF9398C1FULL)

#define DSDL_UAVCAN_EQUIPMENT_ESC_RPMCOMMAND_MAX_SIZE      ((365 + 7)/8)

// Constants

#define DSDL_UAVCAN_EQUIPMENT_ESC_RPMCOMMAND_RPM_MAX_LENGTH                              20

typedef struct
{
    // FieldTypes
    struct
    {
        uint8_t    len;                       // Dynamic array length
        int32_t*   data;                      // Dynamic Array 18bit[20] max items
    } rpm;

} dsdl_uavcan_equipment_esc_RPMCommand;

static inline
uint32_t dsdl_uavcan_equipment_esc_RPMCommand_encode(dsdl_uavcan_equipment_esc_RPMCommand* source, void* msg_buf);

static inline
int32_t dsdl_uavcan_equipment_esc_RPMCommand_decode(const CanardRxTransfer* transfer, uint16_t payload_len, dsdl_uavcan_equipment_esc_RPMCommand* dest, uint8_t** dyn_arr_buf);

static inline
uint32_t dsdl_uavcan_equipment_esc_RPMCommand_encode_internal(dsdl_uavcan_equipment_esc_RPMCommand* source, void* msg_buf, uint32_t offset, uint8_t root_item);

static inline
int32_t dsdl_uavcan_equipment_esc_RPMCommand_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, dsdl_uavcan_equipment_esc_RPMCommand* dest, uint8_t** dyn_arr_buf, int32_t offset, uint8_t tao);

/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 */

#ifndef CANARD_INTERNAL_SATURATE
#define CANARD_INTERNAL_SATURATE(x, max) ( ((x) > max) ? max : ( (-(x) > max) ? (-max) : (x) ) );
#endif

#ifndef CANARD_INTERNAL_SATURATE_UNSIGNED
#define CANARD_INTERNAL_SATURATE_UNSIGNED(x, max) ( ((x) > max) ? max : (x) );
#endif

#define CANARD_INTERNAL_ENABLE_TAO  ((uint8_t) 1)
#define CANARD_INTERNAL_DISABLE_TAO ((uint8_t) 0)

#if defined(__GNUC__)
# define CANARD_MAYBE_UNUSED(x) x __attribute__((unused))
#else
# define CANARD_MAYBE_UNUSED(x) x
#endif

/**
  * @brief dsdl_uavcan_equipment_esc_RPMCommand_encode_internal
  * @param source : pointer to source data struct
  * @param msg_buf: pointer to msg storage
  * @param offset: bit offset to msg storage
  * @param root_item: for detecting if TAO should be used
  * @retval returns offset
  */
uint32_t dsdl_uavcan_equipment_esc_RPMCommand_encode_internal(dsdl_uavcan_equipment_esc_RPMCommand* source,
  void* msg_buf,
  uint32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(root_item))
{
    uint32_t c = 0;

    // Dynamic Array (rpm)
    if (! root_item)
    {
        // - Add array length
        canardEncodeScalar(msg_buf, offset, 5, (void*)&source->rpm.len);
        offset += 5;
    }

    // - Add array items
    for (c = 0; c < source->rpm.len; c++)
    {
        canardEncodeScalar(msg_buf,
                           offset,
                           18,
                           (void*)(source->rpm.data + c));// 131071
        offset += 18;
    }

    return offset;
}

/**
  * @brief dsdl_uavcan_equipment_esc_RPMCommand_encode
  * @param source : Pointer to source data struct
  * @param msg_buf: Pointer to msg storage
  * @retval returns message length as bytes
  */
uint32_t dsdl_uavcan_equipment_esc_RPMCommand_encode(dsdl_uavcan_equipment_esc_RPMCommand* source, void* msg_buf)
{
    uint32_t offset = 0;

    offset = dsdl_uavcan_equipment_esc_RPMCommand_encode_internal(source, msg_buf, offset, 1);

    return (offset + 7 ) / 8;
}

/**
  * @brief dsdl_uavcan_equipment_esc_RPMCommand_decode_internal
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     dsdl_uavcan_equipment_esc_RPMCommand dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @param offset: Call with 0, bit offset to msg storage
  * @param tao: is tail array optimization used
  * @retval offset or ERROR value if < 0
  */
int32_t dsdl_uavcan_equipment_esc_RPMCommand_decode_internal(
  const CanardRxTransfer* transfer,
  uint16_t CANARD_MAYBE_UNUSED(payload_len),
  dsdl_uavcan_equipment_esc_RPMCommand* dest,
  uint8_t** CANARD_MAYBE_UNUSED(dyn_arr_buf),
  int32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(tao))
{
    int32_t ret = 0;
    uint32_t c = 0;

    // Dynamic Array (rpm)
    //  - Last item in struct & Root item & (Array Size > 8 bit), tail array optimization
    if (payload_len && tao == CANARD_INTERNAL_ENABLE_TAO)
    {
        //  - Calculate Array length from MSG length
        dest->rpm.len = ((payload_len * 8) - offset ) / 18; // 18 bit array item size
    }
    else
    {
        // - Array length 5 bits
        ret = canardDecodeScalar(transfer,
                                 offset,
                                 5,
                                 false,
                                 (void*)&dest->rpm.len); // 131071
        if (ret != 5)
        {
            goto dsdl_uavcan_equipment_esc_RPMCommand_error_exit;
        }
        offset += 5;
    }

    //  - Get Array
    if (dyn_arr_buf)
    {
        dest->rpm.data = (int32_t*)*dyn_arr_buf;
    }

    for (c = 0; c < dest->rpm.len; c++)
    {
        if (dyn_arr_buf)
        {
            ret = canardDecodeScalar(transfer,
                                     offset,
                                     18,
                                     true,
                                     (void*)*dyn_arr_buf); // 131071
            if (ret != 18)
            {
                goto dsdl_uavcan_equipment_esc_RPMCommand_error_exit;
            }
            *dyn_arr_buf = (uint8_t*)(((int32_t*)*dyn_arr_buf) + 1);
        }
        offset += 18;
    }
    return offset;

dsdl_uavcan_equipment_esc_RPMCommand_error_exit:
    if (ret < 0)
    {
        return ret;
    }
    else
    {
        return -CANARD_ERROR_INTERNAL;
    }
}

/**
  * @brief dsdl_uavcan_equipment_esc_RPMCommand_decode
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     dsdl_uavcan_equipment_esc_RPMCommand dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @retval offset or ERROR value if < 0
  */
int32_t dsdl_uavcan_equipment_esc_RPMCommand_decode(const CanardRxTransfer* transfer,
  uint16_t payload_len,
  dsdl_uavcan_equipment_esc_RPMCommand* dest,
  uint8_t** dyn_arr_buf)
{
    const int32_t offset = 0;
    int32_t ret = 0;

    /* Backward compatibility support for removing TAO
     *  - first try to decode with TAO DISABLED
     *  - if it fails fall back to TAO ENABLED
     */
    uint8_t tao = CANARD_INTERNAL_DISABLE_TAO;

    while (1)
    {
        // Clear the destination struct
        for (uint32_t c = 0; c < sizeof(dsdl_uavcan_equipment_esc_RPMCommand); c++)
        {
            ((uint8_t*)dest)[c] = 0x00;
        }

        ret = dsdl_uavcan_equipment_esc_RPMCommand_decode_internal(transfer, payload_len, dest, dyn_arr_buf, offset, tao);

        if (ret >= 0)
        {
            break;
        }

        if (tao == CANARD_INTERNAL_ENABLE_TAO)
        {
            break;
        }
        tao = CANARD_INTERNAL_ENABLE_TAO;
    }

    return ret;
}

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __DSDL_UAVCAN_EQUIPMENT_ESC_RPMCOMMAND