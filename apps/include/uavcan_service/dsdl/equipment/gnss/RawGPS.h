/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 */

#ifndef __DSDL_UAVCAN_EQUIPMENT_GNSS_RAWGPS
#define __DSDL_UAVCAN_EQUIPMENT_GNSS_RAWGPS

#include <uavcan_service/libcanard/canard.h>

#ifdef __cplusplus
extern "C"
{
#endif

/******************************* Source text **********************************
#
# GPS low priority auxiliary info.
#

float32 longitude                     # longitude
float32 latitude                      # latitude
float32 altitude                      # altitude
int32   utc                           # utc time

uint8 sats_visible                    # All visible sats of all available GNSS (e.g. GPS, GLONASS, etc)
uint8 sats_state                      # All used sats of all available GPS
uint8 fix_type                        # GPS fix type(1=GPS fix,2=DGPS fix,3=PPS fix,4=Real time Kinematic,5=Float RTK,6=estimated,7=Manual input,8=Simulation)
******************************************************************************/

/********************* DSDL signature source definition ***********************
dsdl.uavcan.equipment.gnss.RawGPS
saturated float32 longitude
saturated float32 latitude
saturated float32 altitude
saturated int32 utc
saturated uint8 sats_visible
saturated uint8 sats_state
saturated uint8 fix_type
******************************************************************************/

#define DSDL_UAVCAN_EQUIPMENT_GNSS_RAWGPS_ID               1060
#define DSDL_UAVCAN_EQUIPMENT_GNSS_RAWGPS_NAME             "dsdl.uavcan.equipment.gnss.RawGPS"
#define DSDL_UAVCAN_EQUIPMENT_GNSS_RAWGPS_SIGNATURE        (0x4BF81729EA1BB7F1ULL)

#define DSDL_UAVCAN_EQUIPMENT_GNSS_RAWGPS_MAX_SIZE         ((152 + 7)/8)

// Constants

typedef struct
{
    // FieldTypes
    float      longitude;                     // float32 Saturate
    float      latitude;                      // float32 Saturate
    float      altitude;                      // float32 Saturate
    int32_t    utc;                           // bit len 32
    uint8_t    sats_visible;                  // bit len 8
    uint8_t    sats_state;                    // bit len 8
    uint8_t    fix_type;                      // bit len 8

} dsdl_uavcan_equipment_gnss_RawGPS;

static inline
uint32_t dsdl_uavcan_equipment_gnss_RawGPS_encode(dsdl_uavcan_equipment_gnss_RawGPS* source, void* msg_buf);

static inline
int32_t dsdl_uavcan_equipment_gnss_RawGPS_decode(const CanardRxTransfer* transfer, uint16_t payload_len, dsdl_uavcan_equipment_gnss_RawGPS* dest, uint8_t** dyn_arr_buf);

static inline
uint32_t dsdl_uavcan_equipment_gnss_RawGPS_encode_internal(dsdl_uavcan_equipment_gnss_RawGPS* source, void* msg_buf, uint32_t offset, uint8_t root_item);

static inline
int32_t dsdl_uavcan_equipment_gnss_RawGPS_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, dsdl_uavcan_equipment_gnss_RawGPS* dest, uint8_t** dyn_arr_buf, int32_t offset, uint8_t tao);

/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 */

#ifndef CANARD_INTERNAL_SATURATE
#define CANARD_INTERNAL_SATURATE(x, max) ( ((x) > max) ? max : ( (-(x) > max) ? (-max) : (x) ) );
#endif

#ifndef CANARD_INTERNAL_SATURATE_UNSIGNED
#define CANARD_INTERNAL_SATURATE_UNSIGNED(x, max) ( ((x) > max) ? max : (x) );
#endif

#define CANARD_INTERNAL_ENABLE_TAO  ((uint8_t) 1)
#define CANARD_INTERNAL_DISABLE_TAO ((uint8_t) 0)

#if defined(__GNUC__)
# define CANARD_MAYBE_UNUSED(x) x __attribute__((unused))
#else
# define CANARD_MAYBE_UNUSED(x) x
#endif

/**
  * @brief dsdl_uavcan_equipment_gnss_RawGPS_encode_internal
  * @param source : pointer to source data struct
  * @param msg_buf: pointer to msg storage
  * @param offset: bit offset to msg storage
  * @param root_item: for detecting if TAO should be used
  * @retval returns offset
  */
uint32_t dsdl_uavcan_equipment_gnss_RawGPS_encode_internal(dsdl_uavcan_equipment_gnss_RawGPS* source,
  void* msg_buf,
  uint32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(root_item))
{
    canardEncodeScalar(msg_buf, offset, 32, (void*)&source->longitude); // 2147483647
    offset += 32;

    canardEncodeScalar(msg_buf, offset, 32, (void*)&source->latitude); // 2147483647
    offset += 32;

    canardEncodeScalar(msg_buf, offset, 32, (void*)&source->altitude); // 2147483647
    offset += 32;

    canardEncodeScalar(msg_buf, offset, 32, (void*)&source->utc); // 2147483647
    offset += 32;

    canardEncodeScalar(msg_buf, offset, 8, (void*)&source->sats_visible); // 255
    offset += 8;

    canardEncodeScalar(msg_buf, offset, 8, (void*)&source->sats_state); // 255
    offset += 8;

    canardEncodeScalar(msg_buf, offset, 8, (void*)&source->fix_type); // 255
    offset += 8;

    return offset;
}

/**
  * @brief dsdl_uavcan_equipment_gnss_RawGPS_encode
  * @param source : Pointer to source data struct
  * @param msg_buf: Pointer to msg storage
  * @retval returns message length as bytes
  */
uint32_t dsdl_uavcan_equipment_gnss_RawGPS_encode(dsdl_uavcan_equipment_gnss_RawGPS* source, void* msg_buf)
{
    uint32_t offset = 0;

    offset = dsdl_uavcan_equipment_gnss_RawGPS_encode_internal(source, msg_buf, offset, 1);

    return (offset + 7 ) / 8;
}

/**
  * @brief dsdl_uavcan_equipment_gnss_RawGPS_decode_internal
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     dsdl_uavcan_equipment_gnss_RawGPS dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @param offset: Call with 0, bit offset to msg storage
  * @param tao: is tail array optimization used
  * @retval offset or ERROR value if < 0
  */
int32_t dsdl_uavcan_equipment_gnss_RawGPS_decode_internal(
  const CanardRxTransfer* transfer,
  uint16_t CANARD_MAYBE_UNUSED(payload_len),
  dsdl_uavcan_equipment_gnss_RawGPS* dest,
  uint8_t** CANARD_MAYBE_UNUSED(dyn_arr_buf),
  int32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(tao))
{
    int32_t ret = 0;

    ret = canardDecodeScalar(transfer, offset, 32, false, (void*)&dest->longitude);
    if (ret != 32)
    {
        goto dsdl_uavcan_equipment_gnss_RawGPS_error_exit;
    }
    offset += 32;

    ret = canardDecodeScalar(transfer, offset, 32, false, (void*)&dest->latitude);
    if (ret != 32)
    {
        goto dsdl_uavcan_equipment_gnss_RawGPS_error_exit;
    }
    offset += 32;

    ret = canardDecodeScalar(transfer, offset, 32, false, (void*)&dest->altitude);
    if (ret != 32)
    {
        goto dsdl_uavcan_equipment_gnss_RawGPS_error_exit;
    }
    offset += 32;

    ret = canardDecodeScalar(transfer, offset, 32, true, (void*)&dest->utc);
    if (ret != 32)
    {
        goto dsdl_uavcan_equipment_gnss_RawGPS_error_exit;
    }
    offset += 32;

    ret = canardDecodeScalar(transfer, offset, 8, false, (void*)&dest->sats_visible);
    if (ret != 8)
    {
        goto dsdl_uavcan_equipment_gnss_RawGPS_error_exit;
    }
    offset += 8;

    ret = canardDecodeScalar(transfer, offset, 8, false, (void*)&dest->sats_state);
    if (ret != 8)
    {
        goto dsdl_uavcan_equipment_gnss_RawGPS_error_exit;
    }
    offset += 8;

    ret = canardDecodeScalar(transfer, offset, 8, false, (void*)&dest->fix_type);
    if (ret != 8)
    {
        goto dsdl_uavcan_equipment_gnss_RawGPS_error_exit;
    }
    offset += 8;
    return offset;

dsdl_uavcan_equipment_gnss_RawGPS_error_exit:
    if (ret < 0)
    {
        return ret;
    }
    else
    {
        return -CANARD_ERROR_INTERNAL;
    }
}

/**
  * @brief dsdl_uavcan_equipment_gnss_RawGPS_decode
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     dsdl_uavcan_equipment_gnss_RawGPS dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @retval offset or ERROR value if < 0
  */
int32_t dsdl_uavcan_equipment_gnss_RawGPS_decode(const CanardRxTransfer* transfer,
  uint16_t payload_len,
  dsdl_uavcan_equipment_gnss_RawGPS* dest,
  uint8_t** dyn_arr_buf)
{
    const int32_t offset = 0;
    int32_t ret = 0;

    /* Backward compatibility support for removing TAO
     *  - first try to decode with TAO DISABLED
     *  - if it fails fall back to TAO ENABLED
     */
    uint8_t tao = CANARD_INTERNAL_DISABLE_TAO;

    while (1)
    {
        // Clear the destination struct
        for (uint32_t c = 0; c < sizeof(dsdl_uavcan_equipment_gnss_RawGPS); c++)
        {
            ((uint8_t*)dest)[c] = 0x00;
        }

        ret = dsdl_uavcan_equipment_gnss_RawGPS_decode_internal(transfer, payload_len, dest, dyn_arr_buf, offset, tao);

        if (ret >= 0)
        {
            break;
        }

        if (tao == CANARD_INTERNAL_ENABLE_TAO)
        {
            break;
        }
        tao = CANARD_INTERNAL_ENABLE_TAO;
    }

    return ret;
}

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __DSDL_UAVCAN_EQUIPMENT_GNSS_RAWGPS