/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 */

#ifndef __DSDL_UAVCAN_PROTOCOL_FILE_ERROR
#define __DSDL_UAVCAN_PROTOCOL_FILE_ERROR

#include <uavcan_service/libcanard/canard.h>

#ifdef __cplusplus
extern "C"
{
#endif

/******************************* Source text **********************************
#
# Nested type.
# File operation result code.
#

int16 OK                = 0
int16 UNKNOWN_ERROR     = 32767

int16 NOT_FOUND         = 2
int16 IO_ERROR          = 5
int16 ACCESS_DENIED     = 13
int16 IS_DIRECTORY      = 21 # I.e. attempt to read/write on a path that points to a directory
int16 INVALID_VALUE     = 22 # E.g. file name is not valid for the target file system
int16 FILE_TOO_LARGE    = 27
int16 OUT_OF_SPACE      = 28
int16 NOT_IMPLEMENTED   = 38

int16 value
******************************************************************************/

/********************* DSDL signature source definition ***********************
dsdl.uavcan.protocol.file.Error
saturated int16 value
******************************************************************************/

#define DSDL_UAVCAN_PROTOCOL_FILE_ERROR_NAME               "dsdl.uavcan.protocol.file.Error"
#define DSDL_UAVCAN_PROTOCOL_FILE_ERROR_SIGNATURE          (0x4A569CBCA3AD1D7AULL)

#define DSDL_UAVCAN_PROTOCOL_FILE_ERROR_MAX_SIZE           ((16 + 7)/8)

// Constants
#define DSDL_UAVCAN_PROTOCOL_FILE_ERROR_OK                                    0 // 0
#define DSDL_UAVCAN_PROTOCOL_FILE_ERROR_UNKNOWN_ERROR                     32767 // 32767
#define DSDL_UAVCAN_PROTOCOL_FILE_ERROR_NOT_FOUND                             2 // 2
#define DSDL_UAVCAN_PROTOCOL_FILE_ERROR_IO_ERROR                              5 // 5
#define DSDL_UAVCAN_PROTOCOL_FILE_ERROR_ACCESS_DENIED                        13 // 13
#define DSDL_UAVCAN_PROTOCOL_FILE_ERROR_IS_DIRECTORY                         21 // 21
#define DSDL_UAVCAN_PROTOCOL_FILE_ERROR_INVALID_VALUE                        22 // 22
#define DSDL_UAVCAN_PROTOCOL_FILE_ERROR_FILE_TOO_LARGE                       27 // 27
#define DSDL_UAVCAN_PROTOCOL_FILE_ERROR_OUT_OF_SPACE                         28 // 28
#define DSDL_UAVCAN_PROTOCOL_FILE_ERROR_NOT_IMPLEMENTED                      38 // 38

typedef struct
{
    // FieldTypes
    int16_t    value;                         // bit len 16

} dsdl_uavcan_protocol_file_Error;

static inline
uint32_t dsdl_uavcan_protocol_file_Error_encode(dsdl_uavcan_protocol_file_Error* source, void* msg_buf);

static inline
int32_t dsdl_uavcan_protocol_file_Error_decode(const CanardRxTransfer* transfer, uint16_t payload_len, dsdl_uavcan_protocol_file_Error* dest, uint8_t** dyn_arr_buf);

static inline
uint32_t dsdl_uavcan_protocol_file_Error_encode_internal(dsdl_uavcan_protocol_file_Error* source, void* msg_buf, uint32_t offset, uint8_t root_item);

static inline
int32_t dsdl_uavcan_protocol_file_Error_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, dsdl_uavcan_protocol_file_Error* dest, uint8_t** dyn_arr_buf, int32_t offset, uint8_t tao);

/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 */

#ifndef CANARD_INTERNAL_SATURATE
#define CANARD_INTERNAL_SATURATE(x, max) ( ((x) > max) ? max : ( (-(x) > max) ? (-max) : (x) ) );
#endif

#ifndef CANARD_INTERNAL_SATURATE_UNSIGNED
#define CANARD_INTERNAL_SATURATE_UNSIGNED(x, max) ( ((x) > max) ? max : (x) );
#endif

#define CANARD_INTERNAL_ENABLE_TAO  ((uint8_t) 1)
#define CANARD_INTERNAL_DISABLE_TAO ((uint8_t) 0)

#if defined(__GNUC__)
# define CANARD_MAYBE_UNUSED(x) x __attribute__((unused))
#else
# define CANARD_MAYBE_UNUSED(x) x
#endif

/**
  * @brief dsdl_uavcan_protocol_file_Error_encode_internal
  * @param source : pointer to source data struct
  * @param msg_buf: pointer to msg storage
  * @param offset: bit offset to msg storage
  * @param root_item: for detecting if TAO should be used
  * @retval returns offset
  */
uint32_t dsdl_uavcan_protocol_file_Error_encode_internal(dsdl_uavcan_protocol_file_Error* source,
  void* msg_buf,
  uint32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(root_item))
{
    canardEncodeScalar(msg_buf, offset, 16, (void*)&source->value); // 32767
    offset += 16;

    return offset;
}

/**
  * @brief dsdl_uavcan_protocol_file_Error_encode
  * @param source : Pointer to source data struct
  * @param msg_buf: Pointer to msg storage
  * @retval returns message length as bytes
  */
uint32_t dsdl_uavcan_protocol_file_Error_encode(dsdl_uavcan_protocol_file_Error* source, void* msg_buf)
{
    uint32_t offset = 0;

    offset = dsdl_uavcan_protocol_file_Error_encode_internal(source, msg_buf, offset, 1);

    return (offset + 7 ) / 8;
}

/**
  * @brief dsdl_uavcan_protocol_file_Error_decode_internal
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     dsdl_uavcan_protocol_file_Error dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @param offset: Call with 0, bit offset to msg storage
  * @param tao: is tail array optimization used
  * @retval offset or ERROR value if < 0
  */
int32_t dsdl_uavcan_protocol_file_Error_decode_internal(
  const CanardRxTransfer* transfer,
  uint16_t CANARD_MAYBE_UNUSED(payload_len),
  dsdl_uavcan_protocol_file_Error* dest,
  uint8_t** CANARD_MAYBE_UNUSED(dyn_arr_buf),
  int32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(tao))
{
    int32_t ret = 0;

    ret = canardDecodeScalar(transfer, offset, 16, true, (void*)&dest->value);
    if (ret != 16)
    {
        goto dsdl_uavcan_protocol_file_Error_error_exit;
    }
    offset += 16;
    return offset;

dsdl_uavcan_protocol_file_Error_error_exit:
    if (ret < 0)
    {
        return ret;
    }
    else
    {
        return -CANARD_ERROR_INTERNAL;
    }
}

/**
  * @brief dsdl_uavcan_protocol_file_Error_decode
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     dsdl_uavcan_protocol_file_Error dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @retval offset or ERROR value if < 0
  */
int32_t dsdl_uavcan_protocol_file_Error_decode(const CanardRxTransfer* transfer,
  uint16_t payload_len,
  dsdl_uavcan_protocol_file_Error* dest,
  uint8_t** dyn_arr_buf)
{
    const int32_t offset = 0;
    int32_t ret = 0;

    /* Backward compatibility support for removing TAO
     *  - first try to decode with TAO DISABLED
     *  - if it fails fall back to TAO ENABLED
     */
    uint8_t tao = CANARD_INTERNAL_DISABLE_TAO;

    while (1)
    {
        // Clear the destination struct
        for (uint32_t c = 0; c < sizeof(dsdl_uavcan_protocol_file_Error); c++)
        {
            ((uint8_t*)dest)[c] = 0x00;
        }

        ret = dsdl_uavcan_protocol_file_Error_decode_internal(transfer, payload_len, dest, dyn_arr_buf, offset, tao);

        if (ret >= 0)
        {
            break;
        }

        if (tao == CANARD_INTERNAL_ENABLE_TAO)
        {
            break;
        }
        tao = CANARD_INTERNAL_ENABLE_TAO;
    }

    return ret;
}

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __DSDL_UAVCAN_PROTOCOL_FILE_ERROR