/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 */

#ifndef __DSDL_UAVCAN_PROTOCOL_PARAM_EXECUTEOPCODE
#define __DSDL_UAVCAN_PROTOCOL_PARAM_EXECUTEOPCODE

#include <uavcan_service/libcanard/canard.h>

#ifdef __cplusplus
extern "C"
{
#endif

/******************************* Source text **********************************
#
# Service to control the node configuration.
#

#
# SAVE operation instructs the remote node to save the current configuration parameters into a non-volatile
# storage. The node may require a restart in order for some changes to take effect.
#
# ERASE operation instructs the remote node to clear its configuration storage and reinitialize the parameters
# with their default values. The node may require a restart in order for some changes to take effect.
#
# Other opcodes may be added in the future (for example, an opcode for switching between multiple configurations).
#
uint8 OPCODE_SAVE  = 0  # Save all parameters to non-volatile storage.
uint8 OPCODE_ERASE = 1  # Clear the non-volatile storage; some changes may take effect only after reboot.
uint8 opcode

#
# Reserved, keep zero.
#
int48 argument

---

#
# If 'ok' (the field below) is true, this value is not used and must be kept zero.
# If 'ok' is false, this value may contain error code. Error code constants may be defined in the future.
#
int48 argument

#
# True if the operation has been performed successfully, false otherwise.
#
bool ok
******************************************************************************/

/********************* DSDL signature source definition ***********************
dsdl.uavcan.protocol.param.ExecuteOpcode
saturated uint8 opcode
saturated int48 argument
---
saturated int48 argument
saturated bool ok
******************************************************************************/

#define DSDL_UAVCAN_PROTOCOL_PARAM_EXECUTEOPCODE_ID        10
#define DSDL_UAVCAN_PROTOCOL_PARAM_EXECUTEOPCODE_NAME      "dsdl.uavcan.protocol.param.ExecuteOpcode"
#define DSDL_UAVCAN_PROTOCOL_PARAM_EXECUTEOPCODE_SIGNATURE (0xF0320C121476F054ULL)

#define DSDL_UAVCAN_PROTOCOL_PARAM_EXECUTEOPCODE_REQUEST_MAX_SIZE ((56 + 7)/8)

// Constants
#define DSDL_UAVCAN_PROTOCOL_PARAM_EXECUTEOPCODE_REQUEST_OPCODE_SAVE          0 // 0
#define DSDL_UAVCAN_PROTOCOL_PARAM_EXECUTEOPCODE_REQUEST_OPCODE_ERASE          1 // 1

typedef struct
{
    // FieldTypes
    uint8_t    opcode;                        // bit len 8
    int64_t    argument;                      // bit len 48

} dsdl_uavcan_protocol_param_ExecuteOpcodeRequest;

static inline
uint32_t dsdl_uavcan_protocol_param_ExecuteOpcodeRequest_encode(dsdl_uavcan_protocol_param_ExecuteOpcodeRequest* source, void* msg_buf);

static inline
int32_t dsdl_uavcan_protocol_param_ExecuteOpcodeRequest_decode(const CanardRxTransfer* transfer, uint16_t payload_len, dsdl_uavcan_protocol_param_ExecuteOpcodeRequest* dest, uint8_t** dyn_arr_buf);

static inline
uint32_t dsdl_uavcan_protocol_param_ExecuteOpcodeRequest_encode_internal(dsdl_uavcan_protocol_param_ExecuteOpcodeRequest* source, void* msg_buf, uint32_t offset, uint8_t root_item);

static inline
int32_t dsdl_uavcan_protocol_param_ExecuteOpcodeRequest_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, dsdl_uavcan_protocol_param_ExecuteOpcodeRequest* dest, uint8_t** dyn_arr_buf, int32_t offset, uint8_t tao);

#define DSDL_UAVCAN_PROTOCOL_PARAM_EXECUTEOPCODE_RESPONSE_MAX_SIZE ((49 + 7)/8)

// Constants

typedef struct
{
    // FieldTypes
    int64_t    argument;                      // bit len 48
    bool       ok;                            // bit len 1

} dsdl_uavcan_protocol_param_ExecuteOpcodeResponse;

static inline
uint32_t dsdl_uavcan_protocol_param_ExecuteOpcodeResponse_encode(dsdl_uavcan_protocol_param_ExecuteOpcodeResponse* source, void* msg_buf);

static inline
int32_t dsdl_uavcan_protocol_param_ExecuteOpcodeResponse_decode(const CanardRxTransfer* transfer, uint16_t payload_len, dsdl_uavcan_protocol_param_ExecuteOpcodeResponse* dest, uint8_t** dyn_arr_buf);

static inline
uint32_t dsdl_uavcan_protocol_param_ExecuteOpcodeResponse_encode_internal(dsdl_uavcan_protocol_param_ExecuteOpcodeResponse* source, void* msg_buf, uint32_t offset, uint8_t root_item);

static inline
int32_t dsdl_uavcan_protocol_param_ExecuteOpcodeResponse_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, dsdl_uavcan_protocol_param_ExecuteOpcodeResponse* dest, uint8_t** dyn_arr_buf, int32_t offset, uint8_t tao);

/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 */

#ifndef CANARD_INTERNAL_SATURATE
#define CANARD_INTERNAL_SATURATE(x, max) ( ((x) > max) ? max : ( (-(x) > max) ? (-max) : (x) ) );
#endif

#ifndef CANARD_INTERNAL_SATURATE_UNSIGNED
#define CANARD_INTERNAL_SATURATE_UNSIGNED(x, max) ( ((x) > max) ? max : (x) );
#endif

#define CANARD_INTERNAL_ENABLE_TAO  ((uint8_t) 1)
#define CANARD_INTERNAL_DISABLE_TAO ((uint8_t) 0)

#if defined(__GNUC__)
# define CANARD_MAYBE_UNUSED(x) x __attribute__((unused))
#else
# define CANARD_MAYBE_UNUSED(x) x
#endif

/**
  * @brief dsdl_uavcan_protocol_param_ExecuteOpcodeRequest_encode_internal
  * @param source : pointer to source data struct
  * @param msg_buf: pointer to msg storage
  * @param offset: bit offset to msg storage
  * @param root_item: for detecting if TAO should be used
  * @retval returns offset
  */
uint32_t dsdl_uavcan_protocol_param_ExecuteOpcodeRequest_encode_internal(dsdl_uavcan_protocol_param_ExecuteOpcodeRequest* source,
  void* msg_buf,
  uint32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(root_item))
{
    canardEncodeScalar(msg_buf, offset, 8, (void*)&source->opcode); // 255
    offset += 8;

    source->argument = CANARD_INTERNAL_SATURATE(source->argument, 140737488355327)
    canardEncodeScalar(msg_buf, offset, 48, (void*)&source->argument); // 140737488355327
    offset += 48;

    return offset;
}

/**
  * @brief dsdl_uavcan_protocol_param_ExecuteOpcodeRequest_encode
  * @param source : Pointer to source data struct
  * @param msg_buf: Pointer to msg storage
  * @retval returns message length as bytes
  */
uint32_t dsdl_uavcan_protocol_param_ExecuteOpcodeRequest_encode(dsdl_uavcan_protocol_param_ExecuteOpcodeRequest* source, void* msg_buf)
{
    uint32_t offset = 0;

    offset = dsdl_uavcan_protocol_param_ExecuteOpcodeRequest_encode_internal(source, msg_buf, offset, 1);

    return (offset + 7 ) / 8;
}

/**
  * @brief dsdl_uavcan_protocol_param_ExecuteOpcodeRequest_decode_internal
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     dsdl_uavcan_protocol_param_ExecuteOpcodeRequest dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @param offset: Call with 0, bit offset to msg storage
  * @param tao: is tail array optimization used
  * @retval offset or ERROR value if < 0
  */
int32_t dsdl_uavcan_protocol_param_ExecuteOpcodeRequest_decode_internal(
  const CanardRxTransfer* transfer,
  uint16_t CANARD_MAYBE_UNUSED(payload_len),
  dsdl_uavcan_protocol_param_ExecuteOpcodeRequest* dest,
  uint8_t** CANARD_MAYBE_UNUSED(dyn_arr_buf),
  int32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(tao))
{
    int32_t ret = 0;

    ret = canardDecodeScalar(transfer, offset, 8, false, (void*)&dest->opcode);
    if (ret != 8)
    {
        goto dsdl_uavcan_protocol_param_ExecuteOpcodeRequest_error_exit;
    }
    offset += 8;

    ret = canardDecodeScalar(transfer, offset, 48, true, (void*)&dest->argument);
    if (ret != 48)
    {
        goto dsdl_uavcan_protocol_param_ExecuteOpcodeRequest_error_exit;
    }
    offset += 48;
    return offset;

dsdl_uavcan_protocol_param_ExecuteOpcodeRequest_error_exit:
    if (ret < 0)
    {
        return ret;
    }
    else
    {
        return -CANARD_ERROR_INTERNAL;
    }
}

/**
  * @brief dsdl_uavcan_protocol_param_ExecuteOpcodeRequest_decode
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     dsdl_uavcan_protocol_param_ExecuteOpcodeRequest dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @retval offset or ERROR value if < 0
  */
int32_t dsdl_uavcan_protocol_param_ExecuteOpcodeRequest_decode(const CanardRxTransfer* transfer,
  uint16_t payload_len,
  dsdl_uavcan_protocol_param_ExecuteOpcodeRequest* dest,
  uint8_t** dyn_arr_buf)
{
    const int32_t offset = 0;
    int32_t ret = 0;

    /* Backward compatibility support for removing TAO
     *  - first try to decode with TAO DISABLED
     *  - if it fails fall back to TAO ENABLED
     */
    uint8_t tao = CANARD_INTERNAL_DISABLE_TAO;

    while (1)
    {
        // Clear the destination struct
        for (uint32_t c = 0; c < sizeof(dsdl_uavcan_protocol_param_ExecuteOpcodeRequest); c++)
        {
            ((uint8_t*)dest)[c] = 0x00;
        }

        ret = dsdl_uavcan_protocol_param_ExecuteOpcodeRequest_decode_internal(transfer, payload_len, dest, dyn_arr_buf, offset, tao);

        if (ret >= 0)
        {
            break;
        }

        if (tao == CANARD_INTERNAL_ENABLE_TAO)
        {
            break;
        }
        tao = CANARD_INTERNAL_ENABLE_TAO;
    }

    return ret;
}

/**
  * @brief dsdl_uavcan_protocol_param_ExecuteOpcodeResponse_encode_internal
  * @param source : pointer to source data struct
  * @param msg_buf: pointer to msg storage
  * @param offset: bit offset to msg storage
  * @param root_item: for detecting if TAO should be used
  * @retval returns offset
  */
uint32_t dsdl_uavcan_protocol_param_ExecuteOpcodeResponse_encode_internal(dsdl_uavcan_protocol_param_ExecuteOpcodeResponse* source,
  void* msg_buf,
  uint32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(root_item))
{
    source->argument = CANARD_INTERNAL_SATURATE(source->argument, 140737488355327)
    canardEncodeScalar(msg_buf, offset, 48, (void*)&source->argument); // 140737488355327
    offset += 48;

    source->ok = CANARD_INTERNAL_SATURATE_UNSIGNED(source->ok, 0)
    canardEncodeScalar(msg_buf, offset, 1, (void*)&source->ok); // 0
    offset += 1;

    return offset;
}

/**
  * @brief dsdl_uavcan_protocol_param_ExecuteOpcodeResponse_encode
  * @param source : Pointer to source data struct
  * @param msg_buf: Pointer to msg storage
  * @retval returns message length as bytes
  */
uint32_t dsdl_uavcan_protocol_param_ExecuteOpcodeResponse_encode(dsdl_uavcan_protocol_param_ExecuteOpcodeResponse* source, void* msg_buf)
{
    uint32_t offset = 0;

    offset = dsdl_uavcan_protocol_param_ExecuteOpcodeResponse_encode_internal(source, msg_buf, offset, 1);

    return (offset + 7 ) / 8;
}

/**
  * @brief dsdl_uavcan_protocol_param_ExecuteOpcodeResponse_decode_internal
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     dsdl_uavcan_protocol_param_ExecuteOpcodeResponse dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @param offset: Call with 0, bit offset to msg storage
  * @param tao: is tail array optimization used
  * @retval offset or ERROR value if < 0
  */
int32_t dsdl_uavcan_protocol_param_ExecuteOpcodeResponse_decode_internal(
  const CanardRxTransfer* transfer,
  uint16_t CANARD_MAYBE_UNUSED(payload_len),
  dsdl_uavcan_protocol_param_ExecuteOpcodeResponse* dest,
  uint8_t** CANARD_MAYBE_UNUSED(dyn_arr_buf),
  int32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(tao))
{
    int32_t ret = 0;

    ret = canardDecodeScalar(transfer, offset, 48, true, (void*)&dest->argument);
    if (ret != 48)
    {
        goto dsdl_uavcan_protocol_param_ExecuteOpcodeResponse_error_exit;
    }
    offset += 48;

    ret = canardDecodeScalar(transfer, offset, 1, false, (void*)&dest->ok);
    if (ret != 1)
    {
        goto dsdl_uavcan_protocol_param_ExecuteOpcodeResponse_error_exit;
    }
    offset += 1;
    return offset;

dsdl_uavcan_protocol_param_ExecuteOpcodeResponse_error_exit:
    if (ret < 0)
    {
        return ret;
    }
    else
    {
        return -CANARD_ERROR_INTERNAL;
    }
}

/**
  * @brief dsdl_uavcan_protocol_param_ExecuteOpcodeResponse_decode
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     dsdl_uavcan_protocol_param_ExecuteOpcodeResponse dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @retval offset or ERROR value if < 0
  */
int32_t dsdl_uavcan_protocol_param_ExecuteOpcodeResponse_decode(const CanardRxTransfer* transfer,
  uint16_t payload_len,
  dsdl_uavcan_protocol_param_ExecuteOpcodeResponse* dest,
  uint8_t** dyn_arr_buf)
{
    const int32_t offset = 0;
    int32_t ret = 0;

    /* Backward compatibility support for removing TAO
     *  - first try to decode with TAO DISABLED
     *  - if it fails fall back to TAO ENABLED
     */
    uint8_t tao = CANARD_INTERNAL_DISABLE_TAO;

    while (1)
    {
        // Clear the destination struct
        for (uint32_t c = 0; c < sizeof(dsdl_uavcan_protocol_param_ExecuteOpcodeResponse); c++)
        {
            ((uint8_t*)dest)[c] = 0x00;
        }

        ret = dsdl_uavcan_protocol_param_ExecuteOpcodeResponse_decode_internal(transfer, payload_len, dest, dyn_arr_buf, offset, tao);

        if (ret >= 0)
        {
            break;
        }

        if (tao == CANARD_INTERNAL_ENABLE_TAO)
        {
            break;
        }
        tao = CANARD_INTERNAL_ENABLE_TAO;
    }

    return ret;
}

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __DSDL_UAVCAN_PROTOCOL_PARAM_EXECUTEOPCODE