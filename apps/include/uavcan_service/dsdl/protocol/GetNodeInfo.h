/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 */

#ifndef __DSDL_UAVCAN_PROTOCOL_GETNODEINFO
#define __DSDL_UAVCAN_PROTOCOL_GETNODEINFO

#include <uavcan_service/libcanard/canard.h>

#ifdef __cplusplus
extern "C"
{
#endif

#include <dsdl/uavcan/protocol/HardwareVersion.h>
#include <dsdl/uavcan/protocol/NodeStatus.h>
#include <dsdl/uavcan/protocol/SoftwareVersion.h>

/******************************* Source text **********************************
#
# Full node info request.
# Note that all fields of the response section are byte-aligned.
#

---

#
# Current node status
#
NodeStatus status

#
# Version information shall not be changed while the node is running.
#
SoftwareVersion software_version
HardwareVersion hardware_version

#
# Human readable non-empty ASCII node name.
# Node name shall not be changed while the node is running.
# Empty string is not a valid node name.
# Allowed characters are: a-z (lowercase ASCII letters) 0-9 (decimal digits) . (dot) - (dash) _ (underscore).
# Node name is a reversed internet domain name (like Java packages), e.g. "com.manufacturer.project.product".
#
uint8[<=80] name
******************************************************************************/

/********************* DSDL signature source definition ***********************
dsdl.uavcan.protocol.GetNodeInfo
---
dsdl.uavcan.protocol.NodeStatus status
dsdl.uavcan.protocol.SoftwareVersion software_version
dsdl.uavcan.protocol.HardwareVersion hardware_version
saturated uint8[<=80] name
******************************************************************************/

#define DSDL_UAVCAN_PROTOCOL_GETNODEINFO_ID                1
#define DSDL_UAVCAN_PROTOCOL_GETNODEINFO_NAME              "dsdl.uavcan.protocol.GetNodeInfo"
#define DSDL_UAVCAN_PROTOCOL_GETNODEINFO_SIGNATURE         (0xBFC9F25EB70545BULL)

#define DSDL_UAVCAN_PROTOCOL_GETNODEINFO_REQUEST_MAX_SIZE  ((0 + 7)/8)

typedef struct
{
    uint8_t empty;
} dsdl_uavcan_protocol_GetNodeInfoRequest;

static inline
uint32_t dsdl_uavcan_protocol_GetNodeInfoRequest_encode(dsdl_uavcan_protocol_GetNodeInfoRequest* source, void* msg_buf);

static inline
int32_t dsdl_uavcan_protocol_GetNodeInfoRequest_decode(const CanardRxTransfer* transfer, uint16_t payload_len, dsdl_uavcan_protocol_GetNodeInfoRequest* dest, uint8_t** dyn_arr_buf);

static inline
uint32_t dsdl_uavcan_protocol_GetNodeInfoRequest_encode_internal(dsdl_uavcan_protocol_GetNodeInfoRequest* source, void* msg_buf, uint32_t offset, uint8_t root_item);

static inline
int32_t dsdl_uavcan_protocol_GetNodeInfoRequest_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, dsdl_uavcan_protocol_GetNodeInfoRequest* dest, uint8_t** dyn_arr_buf, int32_t offset, uint8_t tao);

#define DSDL_UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_MAX_SIZE ((3015 + 7)/8)

// Constants

#define DSDL_UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_NAME_MAX_LENGTH                        80

typedef struct
{
    // FieldTypes
    dsdl_uavcan_protocol_NodeStatus status;                        //
    dsdl_uavcan_protocol_SoftwareVersion software_version;              //
    dsdl_uavcan_protocol_HardwareVersion hardware_version;              //
    struct
    {
        uint8_t    len;                       // Dynamic array length
        uint8_t*   data;                      // Dynamic Array 8bit[80] max items
    } name;

} dsdl_uavcan_protocol_GetNodeInfoResponse;

static inline
uint32_t dsdl_uavcan_protocol_GetNodeInfoResponse_encode(dsdl_uavcan_protocol_GetNodeInfoResponse* source, void* msg_buf);

static inline
int32_t dsdl_uavcan_protocol_GetNodeInfoResponse_decode(const CanardRxTransfer* transfer, uint16_t payload_len, dsdl_uavcan_protocol_GetNodeInfoResponse* dest, uint8_t** dyn_arr_buf);

static inline
uint32_t dsdl_uavcan_protocol_GetNodeInfoResponse_encode_internal(dsdl_uavcan_protocol_GetNodeInfoResponse* source, void* msg_buf, uint32_t offset, uint8_t root_item);

static inline
int32_t dsdl_uavcan_protocol_GetNodeInfoResponse_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, dsdl_uavcan_protocol_GetNodeInfoResponse* dest, uint8_t** dyn_arr_buf, int32_t offset, uint8_t tao);

/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 */

#ifndef CANARD_INTERNAL_SATURATE
#define CANARD_INTERNAL_SATURATE(x, max) ( ((x) > max) ? max : ( (-(x) > max) ? (-max) : (x) ) );
#endif

#ifndef CANARD_INTERNAL_SATURATE_UNSIGNED
#define CANARD_INTERNAL_SATURATE_UNSIGNED(x, max) ( ((x) > max) ? max : (x) );
#endif

#define CANARD_INTERNAL_ENABLE_TAO  ((uint8_t) 1)
#define CANARD_INTERNAL_DISABLE_TAO ((uint8_t) 0)

#if defined(__GNUC__)
# define CANARD_MAYBE_UNUSED(x) x __attribute__((unused))
#else
# define CANARD_MAYBE_UNUSED(x) x
#endif

uint32_t dsdl_uavcan_protocol_GetNodeInfoRequest_encode_internal(dsdl_uavcan_protocol_GetNodeInfoRequest* CANARD_MAYBE_UNUSED(source),
  void* CANARD_MAYBE_UNUSED(msg_buf),
  uint32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(root_item))
{
    return offset;
}

uint32_t dsdl_uavcan_protocol_GetNodeInfoRequest_encode(dsdl_uavcan_protocol_GetNodeInfoRequest* CANARD_MAYBE_UNUSED(source), void* CANARD_MAYBE_UNUSED(msg_buf))
{
    return 0;
}

int32_t dsdl_uavcan_protocol_GetNodeInfoRequest_decode_internal(const CanardRxTransfer* CANARD_MAYBE_UNUSED(transfer),
  uint16_t CANARD_MAYBE_UNUSED(payload_len),
  dsdl_uavcan_protocol_GetNodeInfoRequest* CANARD_MAYBE_UNUSED(dest),
  uint8_t** CANARD_MAYBE_UNUSED(dyn_arr_buf),
  int32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(tao))
{
    return offset;
}

int32_t dsdl_uavcan_protocol_GetNodeInfoRequest_decode(const CanardRxTransfer* CANARD_MAYBE_UNUSED(transfer),
  uint16_t CANARD_MAYBE_UNUSED(payload_len),
  dsdl_uavcan_protocol_GetNodeInfoRequest* CANARD_MAYBE_UNUSED(dest),
  uint8_t** CANARD_MAYBE_UNUSED(dyn_arr_buf))
{
    return 0;
}

/**
  * @brief dsdl_uavcan_protocol_GetNodeInfoResponse_encode_internal
  * @param source : pointer to source data struct
  * @param msg_buf: pointer to msg storage
  * @param offset: bit offset to msg storage
  * @param root_item: for detecting if TAO should be used
  * @retval returns offset
  */
uint32_t dsdl_uavcan_protocol_GetNodeInfoResponse_encode_internal(dsdl_uavcan_protocol_GetNodeInfoResponse* source,
  void* msg_buf,
  uint32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(root_item))
{
    uint32_t c = 0;

    // Compound
    offset = dsdl_uavcan_protocol_NodeStatus_encode_internal((void*)&source->status, msg_buf, offset, 0);

    // Compound
    offset = dsdl_uavcan_protocol_SoftwareVersion_encode_internal((void*)&source->software_version, msg_buf, offset, 0);

    // Compound
    offset = dsdl_uavcan_protocol_HardwareVersion_encode_internal((void*)&source->hardware_version, msg_buf, offset, 0);

    // Dynamic Array (name)
    if (! root_item)
    {
        // - Add array length
        canardEncodeScalar(msg_buf, offset, 7, (void*)&source->name.len);
        offset += 7;
    }

    // - Add array items
    for (c = 0; c < source->name.len; c++)
    {
        canardEncodeScalar(msg_buf,
                           offset,
                           8,
                           (void*)(source->name.data + c));// 255
        offset += 8;
    }

    return offset;
}

/**
  * @brief dsdl_uavcan_protocol_GetNodeInfoResponse_encode
  * @param source : Pointer to source data struct
  * @param msg_buf: Pointer to msg storage
  * @retval returns message length as bytes
  */
uint32_t dsdl_uavcan_protocol_GetNodeInfoResponse_encode(dsdl_uavcan_protocol_GetNodeInfoResponse* source, void* msg_buf)
{
    uint32_t offset = 0;

    offset = dsdl_uavcan_protocol_GetNodeInfoResponse_encode_internal(source, msg_buf, offset, 1);

    return (offset + 7 ) / 8;
}

/**
  * @brief dsdl_uavcan_protocol_GetNodeInfoResponse_decode_internal
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     dsdl_uavcan_protocol_GetNodeInfoResponse dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @param offset: Call with 0, bit offset to msg storage
  * @param tao: is tail array optimization used
  * @retval offset or ERROR value if < 0
  */
int32_t dsdl_uavcan_protocol_GetNodeInfoResponse_decode_internal(
  const CanardRxTransfer* transfer,
  uint16_t CANARD_MAYBE_UNUSED(payload_len),
  dsdl_uavcan_protocol_GetNodeInfoResponse* dest,
  uint8_t** CANARD_MAYBE_UNUSED(dyn_arr_buf),
  int32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(tao))
{
    int32_t ret = 0;
    uint32_t c = 0;

    // Compound
    offset = dsdl_uavcan_protocol_NodeStatus_decode_internal(transfer, 0, (void*)&dest->status, dyn_arr_buf, offset, tao);
    if (offset < 0)
    {
        ret = offset;
        goto dsdl_uavcan_protocol_GetNodeInfoResponse_error_exit;
    }

    // Compound
    offset = dsdl_uavcan_protocol_SoftwareVersion_decode_internal(transfer, 0, (void*)&dest->software_version, dyn_arr_buf, offset, tao);
    if (offset < 0)
    {
        ret = offset;
        goto dsdl_uavcan_protocol_GetNodeInfoResponse_error_exit;
    }

    // Compound
    offset = dsdl_uavcan_protocol_HardwareVersion_decode_internal(transfer, 0, (void*)&dest->hardware_version, dyn_arr_buf, offset, tao);
    if (offset < 0)
    {
        ret = offset;
        goto dsdl_uavcan_protocol_GetNodeInfoResponse_error_exit;
    }

    // Dynamic Array (name)
    //  - Last item in struct & Root item & (Array Size > 8 bit), tail array optimization
    if (payload_len && tao == CANARD_INTERNAL_ENABLE_TAO)
    {
        //  - Calculate Array length from MSG length
        dest->name.len = ((payload_len * 8) - offset ) / 8; // 8 bit array item size
    }
    else
    {
        // - Array length 7 bits
        ret = canardDecodeScalar(transfer,
                                 offset,
                                 7,
                                 false,
                                 (void*)&dest->name.len); // 255
        if (ret != 7)
        {
            goto dsdl_uavcan_protocol_GetNodeInfoResponse_error_exit;
        }
        offset += 7;
    }

    //  - Get Array
    if (dyn_arr_buf)
    {
        dest->name.data = (uint8_t*)*dyn_arr_buf;
    }

    for (c = 0; c < dest->name.len; c++)
    {
        if (dyn_arr_buf)
        {
            ret = canardDecodeScalar(transfer,
                                     offset,
                                     8,
                                     false,
                                     (void*)*dyn_arr_buf); // 255
            if (ret != 8)
            {
                goto dsdl_uavcan_protocol_GetNodeInfoResponse_error_exit;
            }
            *dyn_arr_buf = (uint8_t*)(((uint8_t*)*dyn_arr_buf) + 1);
        }
        offset += 8;
    }
    return offset;

dsdl_uavcan_protocol_GetNodeInfoResponse_error_exit:
    if (ret < 0)
    {
        return ret;
    }
    else
    {
        return -CANARD_ERROR_INTERNAL;
    }
}

/**
  * @brief dsdl_uavcan_protocol_GetNodeInfoResponse_decode
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     dsdl_uavcan_protocol_GetNodeInfoResponse dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @retval offset or ERROR value if < 0
  */
int32_t dsdl_uavcan_protocol_GetNodeInfoResponse_decode(const CanardRxTransfer* transfer,
  uint16_t payload_len,
  dsdl_uavcan_protocol_GetNodeInfoResponse* dest,
  uint8_t** dyn_arr_buf)
{
    const int32_t offset = 0;
    int32_t ret = 0;

    /* Backward compatibility support for removing TAO
     *  - first try to decode with TAO DISABLED
     *  - if it fails fall back to TAO ENABLED
     */
    uint8_t tao = CANARD_INTERNAL_DISABLE_TAO;

    while (1)
    {
        // Clear the destination struct
        for (uint32_t c = 0; c < sizeof(dsdl_uavcan_protocol_GetNodeInfoResponse); c++)
        {
            ((uint8_t*)dest)[c] = 0x00;
        }

        ret = dsdl_uavcan_protocol_GetNodeInfoResponse_decode_internal(transfer, payload_len, dest, dyn_arr_buf, offset, tao);

        if (ret >= 0)
        {
            break;
        }

        if (tao == CANARD_INTERNAL_ENABLE_TAO)
        {
            break;
        }
        tao = CANARD_INTERNAL_ENABLE_TAO;
    }

    return ret;
}

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __DSDL_UAVCAN_PROTOCOL_GETNODEINFO