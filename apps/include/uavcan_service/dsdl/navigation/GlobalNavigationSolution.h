/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 */

#ifndef __DSDL_UAVCAN_NAVIGATION_GLOBALNAVIGATIONSOLUTION
#define __DSDL_UAVCAN_NAVIGATION_GLOBALNAVIGATIONSOLUTION

#include <uavcan_service/libcanard/canard.h>

#ifdef __cplusplus
extern "C"
{
#endif

/******************************* Source text **********************************
#
# Inertial data and orientation in body frame with fused location.
#
# Fields marked as optional should be set to NaN if the corresponding value is unknown.
#

#
# Global network synchronized timestamp, if known.
# Set to zero if the timestamp is not known.
#
#uavcan.Timestamp timestamp

#
# Geo location [angular degree].
#
float64 longitude                   # required
float64 latitude                    # required

#
# Height estimates [meter].
#
float32 height_ellipsoid            # Above ellipsoid (required)
float32 height_msl                  # Above the mean sea level (required)
float32 height_agl                  # Above ground level (provided by radar altimeter or LIDAR) (optional)
float32 height_baro                 # Barometric height (optional)

#
# Atmospheric pressure adjusted to sea level [hectopascal].
#
float16 qnh_hpa                     # optional

#
# Rotation quaternion between the NED frame and the body frame.
# Zero rotation corresponds to the following orientation:
#   X facing north
#   Y facing east
#   Z facing down
#
float32[4] orientation_xyzw

#
# Column order:
#   longitude                                   [meter^2]
#   latitude                                    [meter^2]
#   height (MSL or ellipsoid, whichever worse)  [meter^2]
#   roll angle                                  [radian^2]
#   pitch angle                                 [radian^2]
#   yaw angle                                   [radian^2]
#
float16[<=36] pose_covariance

#
# Linear velocity in the body frame, X-Y-Z [meter/second].
#
float32[3] linear_velocity_body

#
# Angular velocity in the body frame, roll-pitch-yaw [radian/second].
#
float32[3] angular_velocity_body

#
# Low resolution estimate of the linear acceleration in the body frame [(meter/second)^2].
# This estimate should be properly downsampled in order to avoid aliasing effects.
#
float16[3] linear_acceleration_body

#
# Column order:
#   X velocity      [(meter/second)^2]
#   Y velocity      [(meter/second)^2]
#   Z velocity      [(meter/second)^2]
#   roll velocity   [(radian/second)^2]
#   pitch velocity  [(radian/second)^2]
#   yaw velocity    [(radian/second)^2]
#
float16[<=36] velocity_covariance
******************************************************************************/

/********************* DSDL signature source definition ***********************
dsdl.uavcan.navigation.GlobalNavigationSolution
saturated float64 longitude
saturated float64 latitude
saturated float32 height_ellipsoid
saturated float32 height_msl
saturated float32 height_agl
saturated float32 height_baro
saturated float16 qnh_hpa
saturated float32[4] orientation_xyzw
saturated float16[<=36] pose_covariance
saturated float32[3] linear_velocity_body
saturated float32[3] angular_velocity_body
saturated float16[3] linear_acceleration_body
saturated float16[<=36] velocity_covariance
******************************************************************************/

#define DSDL_UAVCAN_NAVIGATION_GLOBALNAVIGATIONSOLUTION_ID 2000
#define DSDL_UAVCAN_NAVIGATION_GLOBALNAVIGATIONSOLUTION_NAME "dsdl.uavcan.navigation.GlobalNavigationSolution"
#define DSDL_UAVCAN_NAVIGATION_GLOBALNAVIGATIONSOLUTION_SIGNATURE (0xDCE34321FDB40A81ULL)

#define DSDL_UAVCAN_NAVIGATION_GLOBALNAVIGATIONSOLUTION_MAX_SIZE ((1804 + 7)/8)

// Constants

#define DSDL_UAVCAN_NAVIGATION_GLOBALNAVIGATIONSOLUTION_ORIENTATION_XYZW_LENGTH          4
#define DSDL_UAVCAN_NAVIGATION_GLOBALNAVIGATIONSOLUTION_POSE_COVARIANCE_MAX_LENGTH       36
#define DSDL_UAVCAN_NAVIGATION_GLOBALNAVIGATIONSOLUTION_LINEAR_VELOCITY_BODY_LENGTH      3
#define DSDL_UAVCAN_NAVIGATION_GLOBALNAVIGATIONSOLUTION_ANGULAR_VELOCITY_BODY_LENGTH     3
#define DSDL_UAVCAN_NAVIGATION_GLOBALNAVIGATIONSOLUTION_LINEAR_ACCELERATION_BODY_LENGTH  3
#define DSDL_UAVCAN_NAVIGATION_GLOBALNAVIGATIONSOLUTION_VELOCITY_COVARIANCE_MAX_LENGTH   36

typedef struct
{
    // FieldTypes
    double     longitude;                     // float64 Saturate
    double     latitude;                      // float64 Saturate
    float      height_ellipsoid;              // float32 Saturate
    float      height_msl;                    // float32 Saturate
    float      height_agl;                    // float32 Saturate
    float      height_baro;                   // float32 Saturate
    float      qnh_hpa;                       // float16 Saturate
    float      orientation_xyzw[4];           // Static Array 32bit[4] max items
    struct
    {
        uint8_t    len;                       // Dynamic array length
        float*     data;                      // Dynamic Array 16bit[36] max items
    } pose_covariance;
    float      linear_velocity_body[3];       // Static Array 32bit[3] max items
    float      angular_velocity_body[3];      // Static Array 32bit[3] max items
    float      linear_acceleration_body[3];   // Static Array 16bit[3] max items
    struct
    {
        uint8_t    len;                       // Dynamic array length
        float*     data;                      // Dynamic Array 16bit[36] max items
    } velocity_covariance;

} dsdl_uavcan_navigation_GlobalNavigationSolution;

static inline
uint32_t dsdl_uavcan_navigation_GlobalNavigationSolution_encode(dsdl_uavcan_navigation_GlobalNavigationSolution* source, void* msg_buf);

static inline
int32_t dsdl_uavcan_navigation_GlobalNavigationSolution_decode(const CanardRxTransfer* transfer, uint16_t payload_len, dsdl_uavcan_navigation_GlobalNavigationSolution* dest, uint8_t** dyn_arr_buf);

static inline
uint32_t dsdl_uavcan_navigation_GlobalNavigationSolution_encode_internal(dsdl_uavcan_navigation_GlobalNavigationSolution* source, void* msg_buf, uint32_t offset, uint8_t root_item);

static inline
int32_t dsdl_uavcan_navigation_GlobalNavigationSolution_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, dsdl_uavcan_navigation_GlobalNavigationSolution* dest, uint8_t** dyn_arr_buf, int32_t offset, uint8_t tao);

/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 */

#ifndef CANARD_INTERNAL_SATURATE
#define CANARD_INTERNAL_SATURATE(x, max) ( ((x) > max) ? max : ( (-(x) > max) ? (-max) : (x) ) );
#endif

#ifndef CANARD_INTERNAL_SATURATE_UNSIGNED
#define CANARD_INTERNAL_SATURATE_UNSIGNED(x, max) ( ((x) > max) ? max : (x) );
#endif

#define CANARD_INTERNAL_ENABLE_TAO  ((uint8_t) 1)
#define CANARD_INTERNAL_DISABLE_TAO ((uint8_t) 0)

#if defined(__GNUC__)
# define CANARD_MAYBE_UNUSED(x) x __attribute__((unused))
#else
# define CANARD_MAYBE_UNUSED(x) x
#endif

/**
  * @brief dsdl_uavcan_navigation_GlobalNavigationSolution_encode_internal
  * @param source : pointer to source data struct
  * @param msg_buf: pointer to msg storage
  * @param offset: bit offset to msg storage
  * @param root_item: for detecting if TAO should be used
  * @retval returns offset
  */
uint32_t dsdl_uavcan_navigation_GlobalNavigationSolution_encode_internal(dsdl_uavcan_navigation_GlobalNavigationSolution* source,
  void* msg_buf,
  uint32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(root_item))
{
    uint32_t c = 0;
#ifndef CANARD_USE_FLOAT16_CAST
    uint16_t tmp_float = 0;
#else
    CANARD_USE_FLOAT16_CAST tmp_float = 0;
#endif

    canardEncodeScalar(msg_buf, offset, 64, (void*)&source->longitude); // 9223372036854775807
    offset += 64;

    canardEncodeScalar(msg_buf, offset, 64, (void*)&source->latitude); // 9223372036854775807
    offset += 64;

    canardEncodeScalar(msg_buf, offset, 32, (void*)&source->height_ellipsoid); // 2147483647
    offset += 32;

    canardEncodeScalar(msg_buf, offset, 32, (void*)&source->height_msl); // 2147483647
    offset += 32;

    canardEncodeScalar(msg_buf, offset, 32, (void*)&source->height_agl); // 2147483647
    offset += 32;

    canardEncodeScalar(msg_buf, offset, 32, (void*)&source->height_baro); // 2147483647
    offset += 32;

    // float16 special handling
#ifndef CANARD_USE_FLOAT16_CAST
    tmp_float = canardConvertNativeFloatToFloat16(source->qnh_hpa);
#else
    tmp_float = (CANARD_USE_FLOAT16_CAST)source->qnh_hpa;
#endif
    canardEncodeScalar(msg_buf, offset, 16, (void*)&tmp_float); // 32767
    offset += 16;
    // Static array (orientation_xyzw)
    for (c = 0; c < 4; c++)
    {
        canardEncodeScalar(msg_buf, offset, 32, (void*)(source->orientation_xyzw + c)); // 2147483647
        offset += 32;
    }

    // Dynamic Array (pose_covariance)
    // - Add array length
    canardEncodeScalar(msg_buf, offset, 6, (void*)&source->pose_covariance.len);
    offset += 6;

    // - Add array items
    for (c = 0; c < source->pose_covariance.len; c++)
    {
        canardEncodeScalar(msg_buf,
                           offset,
                           16,
                           (void*)(source->pose_covariance.data + c));// 32767
        offset += 16;
    }

    // Static array (linear_velocity_body)
    for (c = 0; c < 3; c++)
    {
        canardEncodeScalar(msg_buf, offset, 32, (void*)(source->linear_velocity_body + c)); // 2147483647
        offset += 32;
    }

    // Static array (angular_velocity_body)
    for (c = 0; c < 3; c++)
    {
        canardEncodeScalar(msg_buf, offset, 32, (void*)(source->angular_velocity_body + c)); // 2147483647
        offset += 32;
    }

    // Static array (linear_acceleration_body)
    for (c = 0; c < 3; c++)
    {
        canardEncodeScalar(msg_buf, offset, 16, (void*)(source->linear_acceleration_body + c)); // 32767
        offset += 16;
    }

    // Dynamic Array (velocity_covariance)
    if (! root_item)
    {
        // - Add array length
        canardEncodeScalar(msg_buf, offset, 6, (void*)&source->velocity_covariance.len);
        offset += 6;
    }

    // - Add array items
    for (c = 0; c < source->velocity_covariance.len; c++)
    {
        canardEncodeScalar(msg_buf,
                           offset,
                           16,
                           (void*)(source->velocity_covariance.data + c));// 32767
        offset += 16;
    }

    return offset;
}

/**
  * @brief dsdl_uavcan_navigation_GlobalNavigationSolution_encode
  * @param source : Pointer to source data struct
  * @param msg_buf: Pointer to msg storage
  * @retval returns message length as bytes
  */
uint32_t dsdl_uavcan_navigation_GlobalNavigationSolution_encode(dsdl_uavcan_navigation_GlobalNavigationSolution* source, void* msg_buf)
{
    uint32_t offset = 0;

    offset = dsdl_uavcan_navigation_GlobalNavigationSolution_encode_internal(source, msg_buf, offset, 1);

    return (offset + 7 ) / 8;
}

/**
  * @brief dsdl_uavcan_navigation_GlobalNavigationSolution_decode_internal
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     dsdl_uavcan_navigation_GlobalNavigationSolution dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @param offset: Call with 0, bit offset to msg storage
  * @param tao: is tail array optimization used
  * @retval offset or ERROR value if < 0
  */
int32_t dsdl_uavcan_navigation_GlobalNavigationSolution_decode_internal(
  const CanardRxTransfer* transfer,
  uint16_t CANARD_MAYBE_UNUSED(payload_len),
  dsdl_uavcan_navigation_GlobalNavigationSolution* dest,
  uint8_t** CANARD_MAYBE_UNUSED(dyn_arr_buf),
  int32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(tao))
{
    int32_t ret = 0;
    uint32_t c = 0;
#ifndef CANARD_USE_FLOAT16_CAST
    uint16_t tmp_float = 0;
#else
    CANARD_USE_FLOAT16_CAST tmp_float = 0;
#endif

    ret = canardDecodeScalar(transfer, offset, 64, false, (void*)&dest->longitude);
    if (ret != 64)
    {
        goto dsdl_uavcan_navigation_GlobalNavigationSolution_error_exit;
    }
    offset += 64;

    ret = canardDecodeScalar(transfer, offset, 64, false, (void*)&dest->latitude);
    if (ret != 64)
    {
        goto dsdl_uavcan_navigation_GlobalNavigationSolution_error_exit;
    }
    offset += 64;

    ret = canardDecodeScalar(transfer, offset, 32, false, (void*)&dest->height_ellipsoid);
    if (ret != 32)
    {
        goto dsdl_uavcan_navigation_GlobalNavigationSolution_error_exit;
    }
    offset += 32;

    ret = canardDecodeScalar(transfer, offset, 32, false, (void*)&dest->height_msl);
    if (ret != 32)
    {
        goto dsdl_uavcan_navigation_GlobalNavigationSolution_error_exit;
    }
    offset += 32;

    ret = canardDecodeScalar(transfer, offset, 32, false, (void*)&dest->height_agl);
    if (ret != 32)
    {
        goto dsdl_uavcan_navigation_GlobalNavigationSolution_error_exit;
    }
    offset += 32;

    ret = canardDecodeScalar(transfer, offset, 32, false, (void*)&dest->height_baro);
    if (ret != 32)
    {
        goto dsdl_uavcan_navigation_GlobalNavigationSolution_error_exit;
    }
    offset += 32;

    // float16 special handling
    ret = canardDecodeScalar(transfer, offset, 16, false, (void*)&tmp_float);

    if (ret != 16)
    {
        goto dsdl_uavcan_navigation_GlobalNavigationSolution_error_exit;
    }
#ifndef CANARD_USE_FLOAT16_CAST
    dest->qnh_hpa = canardConvertFloat16ToNativeFloat(tmp_float);
#else
    dest->qnh_hpa = (float)tmp_float;
#endif
    offset += 16;

    // Static array (orientation_xyzw)
    for (c = 0; c < 4; c++)
    {
        ret = canardDecodeScalar(transfer, offset, 32, false, (void*)(dest->orientation_xyzw + c));
        if (ret != 32)
        {
            goto dsdl_uavcan_navigation_GlobalNavigationSolution_error_exit;
        }
        offset += 32;
    }

    // Dynamic Array (pose_covariance)
    //  - Array length, not last item 6 bits
    ret = canardDecodeScalar(transfer,
                             offset,
                             6,
                             false,
                             (void*)&dest->pose_covariance.len); // 32767
    if (ret != 6)
    {
        goto dsdl_uavcan_navigation_GlobalNavigationSolution_error_exit;
    }
    offset += 6;

    //  - Get Array
    if (dyn_arr_buf)
    {
        dest->pose_covariance.data = (float*)*dyn_arr_buf;
    }

    for (c = 0; c < dest->pose_covariance.len; c++)
    {
        if (dyn_arr_buf)
        {
            ret = canardDecodeScalar(transfer,
                                     offset,
                                     16,
                                     false,
                                     (void*)*dyn_arr_buf); // 32767
            if (ret != 16)
            {
                goto dsdl_uavcan_navigation_GlobalNavigationSolution_error_exit;
            }
            *dyn_arr_buf = (uint8_t*)(((float*)*dyn_arr_buf) + 1);
        }
        offset += 16;
    }

    // Static array (linear_velocity_body)
    for (c = 0; c < 3; c++)
    {
        ret = canardDecodeScalar(transfer, offset, 32, false, (void*)(dest->linear_velocity_body + c));
        if (ret != 32)
        {
            goto dsdl_uavcan_navigation_GlobalNavigationSolution_error_exit;
        }
        offset += 32;
    }

    // Static array (angular_velocity_body)
    for (c = 0; c < 3; c++)
    {
        ret = canardDecodeScalar(transfer, offset, 32, false, (void*)(dest->angular_velocity_body + c));
        if (ret != 32)
        {
            goto dsdl_uavcan_navigation_GlobalNavigationSolution_error_exit;
        }
        offset += 32;
    }

    // Static array (linear_acceleration_body)
    for (c = 0; c < 3; c++)
    {
        ret = canardDecodeScalar(transfer, offset, 16, false, (void*)(dest->linear_acceleration_body + c));
        if (ret != 16)
        {
            goto dsdl_uavcan_navigation_GlobalNavigationSolution_error_exit;
        }
        offset += 16;
    }

    // Dynamic Array (velocity_covariance)
    //  - Last item in struct & Root item & (Array Size > 8 bit), tail array optimization
    if (payload_len && tao == CANARD_INTERNAL_ENABLE_TAO)
    {
        //  - Calculate Array length from MSG length
        dest->velocity_covariance.len = ((payload_len * 8) - offset ) / 16; // 16 bit array item size
    }
    else
    {
        // - Array length 6 bits
        ret = canardDecodeScalar(transfer,
                                 offset,
                                 6,
                                 false,
                                 (void*)&dest->velocity_covariance.len); // 32767
        if (ret != 6)
        {
            goto dsdl_uavcan_navigation_GlobalNavigationSolution_error_exit;
        }
        offset += 6;
    }

    //  - Get Array
    if (dyn_arr_buf)
    {
        dest->velocity_covariance.data = (float*)*dyn_arr_buf;
    }

    for (c = 0; c < dest->velocity_covariance.len; c++)
    {
        if (dyn_arr_buf)
        {
            ret = canardDecodeScalar(transfer,
                                     offset,
                                     16,
                                     false,
                                     (void*)*dyn_arr_buf); // 32767
            if (ret != 16)
            {
                goto dsdl_uavcan_navigation_GlobalNavigationSolution_error_exit;
            }
            *dyn_arr_buf = (uint8_t*)(((float*)*dyn_arr_buf) + 1);
        }
        offset += 16;
    }
    return offset;

dsdl_uavcan_navigation_GlobalNavigationSolution_error_exit:
    if (ret < 0)
    {
        return ret;
    }
    else
    {
        return -CANARD_ERROR_INTERNAL;
    }
}

/**
  * @brief dsdl_uavcan_navigation_GlobalNavigationSolution_decode
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     dsdl_uavcan_navigation_GlobalNavigationSolution dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @retval offset or ERROR value if < 0
  */
int32_t dsdl_uavcan_navigation_GlobalNavigationSolution_decode(const CanardRxTransfer* transfer,
  uint16_t payload_len,
  dsdl_uavcan_navigation_GlobalNavigationSolution* dest,
  uint8_t** dyn_arr_buf)
{
    const int32_t offset = 0;
    int32_t ret = 0;

    /* Backward compatibility support for removing TAO
     *  - first try to decode with TAO DISABLED
     *  - if it fails fall back to TAO ENABLED
     */
    uint8_t tao = CANARD_INTERNAL_DISABLE_TAO;

    while (1)
    {
        // Clear the destination struct
        for (uint32_t c = 0; c < sizeof(dsdl_uavcan_navigation_GlobalNavigationSolution); c++)
        {
            ((uint8_t*)dest)[c] = 0x00;
        }

        ret = dsdl_uavcan_navigation_GlobalNavigationSolution_decode_internal(transfer, payload_len, dest, dyn_arr_buf, offset, tao);

        if (ret >= 0)
        {
            break;
        }

        if (tao == CANARD_INTERNAL_ENABLE_TAO)
        {
            break;
        }
        tao = CANARD_INTERNAL_ENABLE_TAO;
    }

    return ret;
}

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __DSDL_UAVCAN_NAVIGATION_GLOBALNAVIGATIONSOLUTION